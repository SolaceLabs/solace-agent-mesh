from typing import List, Optional
from google.adk.tools import ToolContext
from solace_agent_mesh.agent.tools.dynamic_tool import DynamicTool, DynamicToolProvider

class MyToolProvider(DynamicToolProvider):
    """A provider that generates multiple dynamic tools for testing."""

    @DynamicToolProvider.register_tool
    async def get_provider_farewell(self, name: str, tool_context: ToolContext = None) -> dict:
        """Returns a farewell message generated by the provider."""
        return {"farewell": f"Goodbye, {name}!"}

    @DynamicToolProvider.register_tool
    async def combine_strings(
        self, first: str, second: str, tool_context: ToolContext = None
    ) -> dict:
        """Combines two strings into one."""
        return {"combined": f"{first}{second}"}

    def create_tools(self, tool_config: Optional[dict] = None) -> List[DynamicTool]:
        # This will create tools from all decorated functions above
        tools_from_decorators = self._create_tools_from_decorators(tool_config)

        return tools_from_decorators
