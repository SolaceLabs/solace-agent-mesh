import pytest
import json
from sam_test_infrastructure.llm_server.server import TestLLMServer
from sam_test_infrastructure.gateway_interface.component import TestGatewayComponent
from .test_helpers import (
    create_gateway_input_data,
    submit_test_input,
    get_all_task_events,
    assert_final_response_text,
)

pytestmark = [
    pytest.mark.all,
    pytest.mark.asyncio,
    pytest.mark.agent,
    pytest.mark.tools,
    pytest.mark.dynamic_tools,
]


@pytest.mark.asyncio
async def test_single_dynamic_tool_execution(
    test_gateway_app_instance: TestGatewayComponent,
    test_llm_server: TestLLMServer,
):
    """
    Tests that an agent can load and execute a single, class-based DynamicTool.
    """
    scenario_id = "dynamic_tool_single_class_001"
    print(f"\nRunning scenario: {scenario_id}")

    # 1. Prime the LLM to call our dynamic tool
    test_llm_server.prime_responses(
        [
            {
                "choices": [
                    {
                        "message": {
                            "role": "assistant",
                            "tool_calls": [
                                {
                                    "id": "call_dynamic_greeting",
                                    "type": "function",
                                    "function": {
                                        "name": "get_dynamic_greeting",
                                        "arguments": '{"name": "Tester"}',
                                    },
                                }
                            ],
                        }
                    }
                ]
            },
            {
                "choices": [
                    {
                        "message": {
                            "role": "assistant",
                            "content": "The dynamic tool said: [tool_result]",
                        }
                    }
                ]
            },
        ]
    )

    # 2. Submit the task to the agent configured with the dynamic tool
    test_input_data = create_gateway_input_data(
        target_agent="DynamicToolAgent",
        user_identity="dynamic_tool_tester@example.com",
        text_parts_content=["Use the dynamic tool to greet Tester"],
        scenario_id=scenario_id,
    )
    task_id = await submit_test_input(
        test_gateway_app_instance, test_input_data, scenario_id
    )
    events = await get_all_task_events(
        test_gateway_app_instance, task_id, overall_timeout=10.0
    )

    # 3. Assert the final response
    # The tool result should be `{"greeting": "Hi there, Tester!"}`
    assert_final_response_text(
        events, "The dynamic tool said: {'greeting': 'Hi there, Tester!'}"
    )

    # 4. Verify the LLM request to ensure the tool was declared correctly
    captured_requests = test_llm_server.get_captured_requests()
    assert len(captured_requests) > 0
    first_request_tools = captured_requests[0].tools
    assert first_request_tools is not None

    dynamic_tool_decl = next(
        (
            t
            for t in first_request_tools
            if t.get("function", {}).get("name") == "get_dynamic_greeting"
        ),
        None,
    )
    assert (
        dynamic_tool_decl is not None
    ), "Dynamic tool 'get_dynamic_greeting' was not presented to the LLM."
    assert (
        dynamic_tool_decl["function"]["description"]
        == "Returns a simple, dynamically-configured greeting."
    )

    print(f"Scenario {scenario_id}: Completed successfully.")


@pytest.mark.asyncio
async def test_dynamic_tool_provider_execution(
    test_gateway_app_instance: TestGatewayComponent,
    test_llm_server: TestLLMServer,
):
    """
    Tests that an agent can load and execute tools generated by a DynamicToolProvider,
    including one created via the @register_tool decorator.
    """
    scenario_id = "dynamic_tool_provider_001"
    print(f"\nRunning scenario: {scenario_id}")

    # 1. Prime the LLM to call the tool from the provider
    test_llm_server.prime_responses(
        [
            {
                "choices": [
                    {
                        "message": {
                            "role": "assistant",
                            "tool_calls": [
                                {
                                    "id": "call_provider_farewell",
                                    "type": "function",
                                    "function": {
                                        "name": "get_provider_farewell",
                                        "arguments": '{"name": "ProviderTester"}',
                                    },
                                }
                            ],
                        }
                    }
                ]
            },
            {
                "choices": [
                    {
                        "message": {
                            "role": "assistant",
                            "content": "The provider tool said: [tool_result]",
                        }
                    }
                ]
            },
        ]
    )

    # 2. Submit the task to the agent configured with the provider
    test_input_data = create_gateway_input_data(
        target_agent="DynamicProviderAgent",
        user_identity="provider_tester@example.com",
        text_parts_content=[
            "Use the provider tool to say farewell to ProviderTester"
        ],
        scenario_id=scenario_id,
    )
    task_id = await submit_test_input(
        test_gateway_app_instance, test_input_data, scenario_id
    )
    events = await get_all_task_events(
        test_gateway_app_instance, task_id, overall_timeout=10.0
    )

    # 3. Assert the final response
    # The tool result should be `{"farewell": "Goodbye, ProviderTester!"}`
    assert_final_response_text(
        events, "The provider tool said: {'farewell': 'Goodbye, ProviderTester!'}"
    )

    # 4. Verify the LLM request to ensure the tool was declared correctly
    captured_requests = test_llm_server.get_captured_requests()
    assert len(captured_requests) > 0
    first_request_tools = captured_requests[0].tools
    assert first_request_tools is not None

    provider_tool_decl = next(
        (
            t
            for t in first_request_tools
            if t.get("function", {}).get("name") == "get_provider_farewell"
        ),
        None,
    )
    assert (
        provider_tool_decl is not None
    ), "Provider tool 'get_provider_farewell' was not presented to the LLM."
    assert (
        provider_tool_decl["function"]["description"]
        == "Returns a farewell message generated by the provider."
    )

    print(f"Scenario {scenario_id}: Completed successfully.")
