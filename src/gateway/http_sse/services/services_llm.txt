# DEVELOPER GUIDE: services

## Quick Summary
The `services` directory contains the business logic layer for the HTTP SSE Gateway. It provides high-level services that abstract interactions with agent registries, identity providers, and A2A (Agent-to-Agent) messaging protocols. These services handle agent discovery, user searches, and task management operations.

## Files Overview
- `__init__.py` - Package initialization file marking the directory as a Python package
- `agent_service.py` - Service for retrieving information about discovered A2A agents
- `people_service.py` - Service for searching users via configured identity services  
- `task_service.py` - Service for handling A2A task operations like cancellation

## Developer API Reference

### __init__.py
**Purpose:** Marks the directory as a Python package
**Import:** N/A - No public interfaces

---

### agent_service.py
**Purpose:** Provides methods for accessing information about discovered A2A agents from the AgentRegistry
**Import:** `from gateway.http_sse.services.agent_service import AgentService`

**Classes:**
- `AgentService(agent_registry: AgentRegistry)` - Service for accessing agent information
  - `get_all_agents() -> List[AgentCard]` - Retrieves all currently discovered and registered agent cards
  - `get_agent_by_name(agent_name: str) -> Optional[AgentCard]` - Retrieves a specific agent card by name

**Usage Examples:**
```python
from gateway.http_sse.services.agent_service import AgentService
from common.agent_registry import AgentRegistry

# Initialize with agent registry
agent_registry = AgentRegistry()
agent_service = AgentService(agent_registry=agent_registry)

# Get all agents
all_agents = agent_service.get_all_agents()
print(f"Found {len(all_agents)} agents")

# Get specific agent
agent = agent_service.get_agent_by_name("my-agent")
if agent:
    print(f"Found agent: {agent.name}")
```

---

### people_service.py
**Purpose:** Provides user search functionality via configured identity services
**Import:** `from gateway.http_sse.services.people_service import PeopleService`

**Classes:**
- `PeopleService(identity_service: Optional[BaseIdentityService])` - Service for searching and retrieving user information
  - `search_for_users(query: str, limit: int = 10) -> List[Dict[str, Any]]` - Searches for users via the identity service (async)

**Usage Examples:**
```python
import asyncio
from gateway.http_sse.services.people_service import PeopleService
from common.services.identity_service import BaseIdentityService

# Initialize with identity service
identity_service = MyIdentityService()
people_service = PeopleService(identity_service=identity_service)

# Search for users
async def search_users():
    users = await people_service.search_for_users("john", limit=5)
    print(f"Found {len(users)} users")
    return users

# Run the search
asyncio.run(search_users())
```

---

### task_service.py
**Purpose:** Handles A2A task operations like cancellation using CoreA2AService and message publishing
**Import:** `from gateway.http_sse.services.task_service import TaskService, PublishFunc`

**Type Aliases:**
- `PublishFunc: Callable[[str, Dict, Optional[Dict]], None]` - Function type for publishing messages (topic, payload, user_properties)

**Classes:**
- `TaskService(core_a2a_service: CoreA2AService, publish_func: PublishFunc, namespace: str, gateway_id: str, sse_manager: SSEManager, task_context_map: Dict[str, Dict], task_context_lock: threading.Lock, app_name: str)` - Service for managing A2A task operations
  - `cancel_task(agent_name: str, task_id: str, client_id: str, user_id: str = "web_user") -> None` - Cancels a task by publishing A2A CancelTaskRequest (async)

**Usage Examples:**
```python
import asyncio
import threading
from gateway.http_sse.services.task_service import TaskService, PublishFunc
from core_a2a.service import CoreA2AService
from gateway.http_sse.sse_manager import SSEManager

# Define publish function
def my_publish_func(topic: str, payload: dict, user_properties: dict = None):
    print(f"Publishing to {topic}: {payload}")

# Initialize dependencies
core_a2a_service = CoreA2AService()
sse_manager = SSEManager()
task_context_map = {}
task_context_lock = threading.Lock()

# Create task service
task_service = TaskService(
    core_a2a_service=core_a2a_service,
    publish_func=my_publish_func,
    namespace="my-namespace",
    gateway_id="gateway-01",
    sse_manager=sse_manager,
    task_context_map=task_context_map,
    task_context_lock=task_context_lock,
    app_name="my-app"
)

# Cancel a task
async def cancel_task():
    await task_service.cancel_task(
        agent_name="data-processor",
        task_id="task-123",
        client_id="client-456",
        user_id="user-789"
    )

asyncio.run(cancel_task())
```

# content_hash: 7048bb1eb5d3d1217ddd189c1bd423e5eb1f938a2349871dd34bd75200a72264
