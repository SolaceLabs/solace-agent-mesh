## Quick Summary
The `services` directory provides a modular and extensible framework for integrating external data sources related to identity and employee information into the Solace AI Connector. It is built on a provider pattern, defining abstract base classes (`BaseIdentityService`, `BaseEmployeeService`) that establish a clear contract for what data and functionality a service must provide.

The core architecture revolves around factory functions (`create_identity_service`, `create_employee_service`) that instantiate specific service providers based on a configuration dictionary. This allows the application to remain decoupled from the concrete implementations. Providers can be either built-in (like the file-based identity service located in the `providers/` subdirectory) or dynamically loaded as external plugins, making the system highly flexible and easy to extend.

## Files and Subdirectories Overview
- **Direct files:**
  - `__init__.py`: Marks the directory as a Python package.
  - `employee_service.py`: Defines the abstract contract and factory for employee data services.
  - `identity_service.py`: Defines the abstract contract and factory for user identity services.
- **Subdirectories:**
  - `providers/`: Contains concrete implementations of the service contracts, such as a file-based identity provider.

## Developer API Reference

### Direct Files

#### employee_service.py
**Purpose:** Defines the abstract base class (`BaseEmployeeService`) that all employee service providers must implement, and a factory function (`create_employee_service`) to instantiate them. It enforces a canonical schema for employee data to ensure consistency across different providers.
**Import:** `from solace_ai_connector.common.services.employee_service import BaseEmployeeService, create_employee_service`

**Classes/Functions/Constants:**
- **`class BaseEmployeeService(ABC)`**: The abstract base class for employee service providers.
    - **`__init__(self, config: Dict[str, Any])`**: Initializes the service, setting up configuration and an optional in-memory cache.
    - **`async def get_employee_dataframe(self) -> pd.DataFrame`**: (Abstract) Returns the entire employee directory as a pandas DataFrame.
    - **`async def get_employee_profile(self, employee_id: str) -> Optional[Dict[str, Any]]`**: (Abstract) Fetches the profile for a single employee, conforming to the canonical schema.
    - **`async def get_time_off_data(self, employee_id: str) -> List[Dict[str, Any]]`**: (Abstract) Retrieves a list of time-off entries for an employee.
    - **`async def get_employee_profile_picture(self, employee_id: str) -> Optional[str]`**: (Abstract) Fetches an employee's profile picture as a data URI string.
- **`def create_employee_service(config: Optional[Dict[str, Any]]) -> Optional[BaseEmployeeService]`**: A factory function that dynamically loads and instantiates an employee service provider based on the `type` specified in the configuration. It primarily uses Python's entry points to find and load external plugins.

#### identity_service.py
**Purpose:** Defines the abstract base class (`BaseIdentityService`) for identity providers and a factory function (`create_identity_service`) to create instances of them. This service is used for user lookups and profile enrichment.
**Import:** `from solace_ai_connector.common.services.identity_service import BaseIdentityService, create_identity_service`

**Classes/Functions/Constants:**
- **`class BaseIdentityService(ABC)`**: The abstract base class for identity service providers.
    - **`__init__(self, config: Dict[str, Any])`**: Initializes the service, setting up configuration and an optional in-memory cache.
    - **`async def get_user_profile(self, auth_claims: Dict[str, Any]) -> Optional[Dict[str, Any]]`**: (Abstract) Fetches additional profile details for an authenticated user based on claims.
    - **`async def search_users(self, query: str, limit: int = 10) -> List[Dict[str, Any]]`**: (Abstract) Searches for users based on a query string (e.g., for autocomplete).
- **`def create_identity_service(config: Optional[Dict[str, Any]]) -> Optional[BaseIdentityService]`**: A factory function that instantiates an identity service provider. It has special handling for the built-in `local_file` provider and uses Python entry points for all other provider types.

### Subdirectory APIs

#### providers/
**Purpose:** Contains concrete implementations of the abstract service classes. It ships with a built-in provider for the `IdentityService` that is useful for development and testing.
**Key Exports:** `LocalFileIdentityService`
**Import Examples:**
```python
# Direct import of the concrete implementation
from solace_ai_connector.common.services.providers.local_file_identity_service import LocalFileIdentityService

# Or import the entire providers module
from solace_ai_connector.common.services import providers
```

## Complete Usage Guide

### 1. Using the Service Factories (Recommended Approach)
The factories are the primary way to create and use services. They abstract away the specific implementation details and handle plugin loading.

**Example: Creating Identity and Employee Services**

```python
import asyncio
from solace_ai_connector.common.services.identity_service import create_identity_service
from solace_ai_connector.common.services.employee_service import create_employee_service

async def main():
    # --- Identity Service Example (using built-in provider) ---
    identity_config = {
        "type": "local_file",
        "file_path": "path/to/your/users.json",
        "lookup_key": "email",  # Key to use for lookups from auth_claims
        "cache_ttl_seconds": 3600
    }
    identity_service = create_identity_service(identity_config)

    if identity_service:
        print("Identity Service created.")
        # Fetch a user profile
        auth_claims = {"email": "jane.doe@example.com"}
        user_profile = await identity_service.get_user_profile(auth_claims)
        print(f"User Profile: {user_profile}")

        # Search for users
        search_results = await identity_service.search_users("Jane")
        print(f"Search Results: {search_results}")

    # --- Employee Service Example (using external plugin) ---
    employee_config = {
        "type": "bamboohr_plugin",  # Must match plugin entry point name
        "api_key": "your-secret-api-key",
        "subdomain": "your-company",
        "cache_ttl_seconds": 7200
    }
    employee_service = create_employee_service(employee_config)

    if employee_service:
        print("\nEmployee Service created.")
        # Get employee profile
        employee_profile = await employee_service.get_employee_profile("jane.doe@example.com")
        print(f"Employee Profile: {employee_profile}")

        # Get time off data
        time_off = await employee_service.get_time_off_data("jane.doe@example.com")
        print(f"Time Off Data: {time_off}")

        # Get entire employee directory
        df = await employee_service.get_employee_dataframe()
        print(f"Employee Directory shape: {df.shape}")

asyncio.run(main())
```

### 2. Direct Instantiation of Built-in Providers
For testing or when you know you'll always use a specific built-in provider, you can instantiate directly.

**Example: Using LocalFileIdentityService Directly**

```python
import asyncio
import json
from solace_ai_connector.common.services.providers.local_file_identity_service import LocalFileIdentityService

async def setup_and_use_local_identity():
    # Create sample users.json file
    users_data = [
        {
            "id": "jdoe",
            "email": "jane.doe@example.com", 
            "name": "Jane Doe",
            "title": "Senior Engineer",
            "manager_id": "ssmith"
        },
        {
            "id": "ssmith",
            "email": "sam.smith@example.com",
            "name": "Sam Smith", 
            "title": "Engineering Manager"
        }
    ]

    with open("users.json", "w") as f:
        json.dump(users_data, f)

    # Configuration without 'type' key for direct instantiation
    config = {
        "file_path": "users.json",
        "lookup_key": "id",
        "cache_ttl_seconds": 1800
    }

    # Instantiate directly
    local_service = LocalFileIdentityService(config)
    
    # Use the service
    auth_claims = {"id": "jdoe"}
    profile = await local_service.get_user_profile(auth_claims)
    print(f"User profile: {profile}")
    
    # Search functionality
    results = await local_service.search_users("jane", limit=5)
    print(f"Search results: {results}")

asyncio.run(setup_and_use_local_identity())
```

### 3. Creating Custom Service Providers
To create your own service provider, inherit from the appropriate base class and implement all abstract methods.

**Example: Custom Employee Service Provider**

```python
import pandas as pd
from typing import Any, Dict, List, Optional
from solace_ai_connector.common.services.employee_service import BaseEmployeeService

class CustomEmployeeService(BaseEmployeeService):
    """Custom employee service that connects to your HR system."""
    
    def __init__(self, config: Dict[str, Any]):
        super().__init__(config)
        self.api_endpoint = config.get("api_endpoint")
        self.api_key = config.get("api_key")
    
    async def get_employee_dataframe(self) -> pd.DataFrame:
        """Fetch all employees and return as DataFrame."""
        # Your implementation here
        # This should return a DataFrame with canonical schema columns
        employees_data = await self._fetch_all_employees()
        return pd.DataFrame(employees_data)
    
    async def get_employee_profile(self, employee_id: str) -> Optional[Dict[str, Any]]:
        """Fetch single employee profile."""
        # Your implementation here
        return await self._fetch_employee_by_id(employee_id)
    
    async def get_time_off_data(self, employee_id: str) -> List[Dict[str, Any]]:
        """Fetch time off data for employee."""
        # Must return list of dicts with 'start', 'end', 'type', 'amount' keys
        return await self._fetch_time_off(employee_id)
    
    async def get_employee_profile_picture(self, employee_id: str) -> Optional[str]:
        """Fetch profile picture as data URI."""
        return await self._fetch_profile_picture(employee_id)
    
    # Your private helper methods
    async def _fetch_all_employees(self):
        # Implementation details
        pass
    
    async def _fetch_employee_by_id(self, employee_id: str):
        # Implementation details
        pass
    
    async def _fetch_time_off(self, employee_id: str):
        # Implementation details
        pass
    
    async def _fetch_profile_picture(self, employee_id: str):
        # Implementation details
        pass

# Usage
config = {
    "api_endpoint": "https://your-hr-system.com/api",
    "api_key": "your-api-key",
    "cache_ttl_seconds": 3600
}

custom_service = CustomEmployeeService(config)
```

### 4. Working with Both Services Together
Often you'll want to use both identity and employee services together for comprehensive user information.

**Example: Combined Service Usage**

```python
import asyncio
from solace_ai_connector.common.services.identity_service import create_identity_service
from solace_ai_connector.common.services.employee_service import create_employee_service

async def comprehensive_user_lookup(user_identifier: str):
    # Setup both services
    identity_config = {
        "type": "local_file",
        "file_path": "users.json",
        "lookup_key": "email"
    }
    
    employee_config = {
        "type": "your_hr_plugin",
        "api_key": "your-key"
    }
    
    identity_service = create_identity_service(identity_config)
    employee_service = create_employee_service(employee_config)
    
    # Get comprehensive user information
    auth_claims = {"email": user_identifier}
    
    # Get identity information
    identity_profile = None
    if identity_service:
        identity_profile = await identity_service.get_user_profile(auth_claims)
    
    # Get employee information
    employee_profile = None
    time_off_data = None
    profile_picture = None
    
    if employee_service:
        employee_profile = await employee_service.get_employee_profile(user_identifier)
        time_off_data = await employee_service.get_time_off_data(user_identifier)
        profile_picture = await employee_service.get_employee_profile_picture(user_identifier)
    
    # Combine all information
    comprehensive_profile = {
        "identity": identity_profile,
        "employee": employee_profile,
        "time_off": time_off_data,
        "profile_picture": profile_picture
    }
    
    return comprehensive_profile

# Usage
user_info = asyncio.run(comprehensive_user_lookup("jane.doe@example.com"))
print(f"Complete user information: {user_info}")
```

This guide demonstrates the flexibility of the services framework, from simple factory usage to creating custom providers and combining multiple services for comprehensive functionality.

# content_hash: 82b39425a596ce17f7d767465a57a6393931091b51fbc6d4996ae7f953daf269
