## Quick Summary

The `testing` directory provides utilities for testing the A2A (Agent-to-Agent) framework. It contains debugging tools that help developers understand test failures by providing human-readable representations of agent event histories and interactions.

## Files Overview

- `__init__.py` - Package initialization file marking the directory as a Python module
- `debug_utils.py` - Debugging utilities including pretty-printing for A2A event history
- `testing_llm.txt` - Documentation file (not a code module)

## Developer API Reference

### debug_utils.py
**Purpose:** Provides debugging utilities for the declarative test framework, including a pretty-printer for A2A event history
**Import:** `from agent.testing.debug_utils import pretty_print_event_history`

**Functions:**
- `pretty_print_event_history(event_history: List[Dict[str, Any]], max_string_length: int = 200) -> None` - Formats and prints a list of A2A event payloads for debugging. Intelligently parses different event types (status updates, final responses, errors, artifacts) and displays them in a structured, readable format with string truncation for concise output.

**Usage Examples:**
```python
# Import the debugging utility
from agent.testing.debug_utils import pretty_print_event_history
from typing import List, Dict, Any

# Example: Debug a failed test by printing event history
def test_agent_task():
    event_history = []
    try:
        # Your test code here that populates event_history
        # ... test execution ...
        pass
    except AssertionError:
        # Print event history when test fails
        pretty_print_event_history(event_history)
        raise

# Example: Print event history with custom string length limit
sample_events = [
    {
        "result": {
            "status": {
                "state": "EXECUTING",
                "message": {
                    "parts": [
                        {"type": "text", "text": "Processing your request..."}
                    ]
                }
            },
            "final": False
        }
    },
    {
        "error": {
            "code": "TIMEOUT",
            "message": "Request timed out after 30 seconds"
        }
    }
]

# Print with shorter string truncation
pretty_print_event_history(sample_events, max_string_length=50)

# Handle empty event history (no events recorded)
pretty_print_event_history([])
```

# content_hash: d9352844683547bf3473ba718b29c8a10641f0100d334388ebe9c6e1be58cf9b
