# DEVELOPER GUIDE: client

## Quick Summary
The `client` directory provides a Python-based client library for Agent-to-Agent (A2A) communication. It enables developers to discover remote agent capabilities via an "Agent Card" and interact with agents by sending tasks, receiving streaming responses, and managing task lifecycle (status checking, cancellation, callbacks).

## Files Overview
- `__init__.py` - Exposes the primary `A2AClient` and `A2ACardResolver` classes for easy importing
- `card_resolver.py` - Contains `A2ACardResolver` for discovering and fetching agent capabilities from well-known endpoints
- `client.py` - Contains the main `A2AClient` class for all agent communication and task management

## Developer API Reference

### __init__.py
**Purpose:** Makes the main client classes available directly under the client package
**Import:** `from solace_agent_mesh.common.client import A2AClient, A2ACardResolver`

**Constants/Variables:**
- `__all__: list[str]` - Exported public objects: `["A2AClient", "A2ACardResolver"]`

### card_resolver.py
**Purpose:** Resolves and fetches an agent's capability card from a well-known endpoint
**Import:** `from solace_agent_mesh.common.client import A2ACardResolver`

**Classes:**
- `A2ACardResolver(base_url: str, agent_card_path: str = "/.well-known/agent.json")` - Client for discovering agent capabilities
  - `get_agent_card() -> AgentCard` - Fetches and parses the agent card JSON from the configured endpoint

**Usage Examples:**
```python
from solace_agent_mesh.common.client import A2ACardResolver

# Standard usage with default path
resolver = A2ACardResolver(base_url="https://agent.example.com")
agent_card = resolver.get_agent_card()
print(f"Agent: {agent_card.name}, URL: {agent_card.url}")

# Custom agent card path
custom_resolver = A2ACardResolver(
    base_url="https://agent.example.com",
    agent_card_path="/api/v1/agent-info.json"
)
card = custom_resolver.get_agent_card()
```

### client.py
**Purpose:** Main client for communicating with remote agents via JSON-RPC over HTTP
**Import:** `from solace_agent_mesh.common.client import A2AClient`

**Classes:**
- `A2AClient(agent_card: AgentCard = None, url: str = None)` - Primary agent communication client
  - `async send_task(payload: dict[str, Any]) -> SendMessageResponse` - Sends a task for processing
  - `async send_task_streaming(payload: dict[str, Any]) -> AsyncIterable[SendStreamingMessageResponse]` - Sends task expecting streaming response
  - `async get_task(payload: dict[str, Any]) -> GetTaskResponse` - Gets task status/result
  - `async cancel_task(payload: dict[str, Any]) -> CancelTaskResponse` - Cancels a running task
  - `async set_task_callback(payload: dict[str, Any]) -> SetTaskPushNotificationConfigResponse` - Sets task completion callback
  - `async get_task_callback(payload: dict[str, Any]) -> GetTaskPushNotificationConfigResponse` - Gets current task callback config

**Usage Examples:**
```python
import asyncio
from solace_agent_mesh.common.client import A2AClient, A2ACardResolver

async def main():
    # Initialize via agent card discovery
    resolver = A2ACardResolver("https://agent.example.com")
    agent_card = resolver.get_agent_card()
    client = A2AClient(agent_card=agent_card)
    
    # Or initialize with direct URL
    # client = A2AClient(url="https://agent.example.com/api")
    
    # Send a task
    response = await client.send_task({
        "action": "summarize",
        "text": "Long document content..."
    })
    task_id = response.result.task_id
    
    # Check task status
    status = await client.get_task({"task_id": task_id})
    print(f"Status: {status.result.status}")
    
    # Stream a task response
    async for chunk in client.send_task_streaming({
        "action": "generate_story",
        "prompt": "A robot discovers music"
    }):
        print(f"Chunk: {chunk.result.content}")
    
    # Set callback for task completion
    await client.set_task_callback({
        "task_id": task_id,
        "callback_url": "https://myapp.com/webhook"
    })
    
    # Cancel task if needed
    await client.cancel_task({"task_id": task_id})

# Run the example
asyncio.run(main())
```

# content_hash: e46a5b8e483fb0f13c56789bc0ad827fe86e2550805c9a8ed103a5fc96c91170
