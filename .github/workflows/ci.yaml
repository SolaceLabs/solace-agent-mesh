name: CI
on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize]
    branches:
      - main

permissions:
  repository-projects: read
  contents: write
  id-token: write
  packages: write
  checks: write
  pull-requests: write

jobs:
  ci:
    uses: SolaceDev/solace-public-workflows/.github/workflows/hatch_ci.yml@main
    with:
      min-python-version: "3.10"
      max-python-version: "3.13"
      whitesource_project_name: "solace-agent-mesh"
      whitesource_product_name: "solaceai"
      whitesource_config_file: "wss-unified-agent.config"
      npm_package_path: client/webui/frontend
      node_version: 20
      npm_lock_file: package-lock.json

    secrets:
      SONAR_TOKEN: ${{ secrets.SONARQUBE_TOKEN }}
      SONAR_HOST_URL: ${{ secrets.SONARQUBE_HOST_URL }}
      WHITESOURCE_API_KEY: ${{ secrets.WHITESOURCE_API_KEY }}
      MANIFEST_AWS_ACCESS_KEY_ID: ${{ secrets.MANIFEST_READ_ONLY_AWS_ACCESS_KEY_ID }}
      MANIFEST_AWS_SECRET_ACCESS_KEY: ${{ secrets.MANIFEST_READ_ONLY_AWS_SECRET_ACCESS_KEY }}
      MANIFEST_AWS_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
  # ----------------------------------------------------
  # PHASE 0: Prepare Metadata and Determine Build Strategy
  # ----------------------------------------------------
  prepare-metadata:
    name: Prepare Build Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      short_sha: ${{ steps.get_commit_hash.outputs.short_sha }}
      commit_hash: ${{ steps.get_commit_hash.outputs.commit_hash }}
      release_tag: ${{ steps.release_tag.outputs.release_tag }}
      image_name: ${{ steps.tag_images.outputs.image_name }}
      tags: ${{ steps.tag_images.outputs.tags }}
      docker_push: ${{ steps.set_build_params.outputs.docker_push }}
      update_manifest: ${{ steps.set_build_params.outputs.update_manifest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get Commit Hash
        id: get_commit_hash
        run: |
          echo "commit_hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT
          echo "short_sha=${GITHUB_SHA:0:10}" >> $GITHUB_OUTPUT

      - name: Get Version from hatch
        id: get_version
        run: |
          python3 -m pip install hatch
          echo "version=$(hatch version)" >> $GITHUB_OUTPUT
          echo "Found version: $(hatch version)"

      - name: Determine Release Tag
        id: release_tag
        run: |
          # Sanitize ref_name for Docker tag compatibility (replace / with -)
          sanitized_ref="${{ github.ref_name }}"
          sanitized_ref="${sanitized_ref//\//-}"
          echo "release_tag=${sanitized_ref}" >> $GITHUB_OUTPUT
          echo "Using sanitized branch name as release tag: ${sanitized_ref} (from ${{ github.ref_name }})"

      - name: Set Build Params
        id: set_build_params
        run: |
          if [[ "${{ github.event_name == 'push' }}" == "true" ]]; then
            echo "docker_push=true" >> $GITHUB_OUTPUT
            echo "Will push images for branch push"
            
            # Only update manifest for default branch pushes
            if [[ "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
              echo "update_manifest=true" >> $GITHUB_OUTPUT
              echo "Will update release manifest for default branch push"
            else
              echo "update_manifest=false" >> $GITHUB_OUTPUT
              echo "Will not update release manifest for non-default branch push"
            fi
          else
            echo "docker_push=false" >> $GITHUB_OUTPUT
            echo "update_manifest=false" >> $GITHUB_OUTPUT
            echo "Will build but not push for PR"
          fi
          echo "Always building multiplatform for all scenarios"

      - name: Configure AWS credentials
        if: fromJSON(steps.set_build_params.outputs.docker_push)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SAM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SAM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        if: fromJSON(steps.set_build_params.outputs.docker_push)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Tag Images
        id: tag_images
        shell: bash
        run: |
          version="${{ steps.get_version.outputs.version }}"
          release_tag="${{ steps.release_tag.outputs.release_tag }}"
          short_sha="${{ steps.get_commit_hash.outputs.short_sha }}"

          # Determine image name based on event and branch
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref_name }}" == "${{ github.event.repository.default_branch }}" ]]; then
            # Push to default branch - use ECR registry
            image_name="${{ secrets.SAM_AWS_ECR_REGISTRY }}/solace-agent-mesh"
            echo "Using ECR registry for default branch push"
          else
            # PR or other branch - use GitHub repo name
            image_name="${{ github.repository }}"
            echo "Using GitHub repository name for PR/branch build"
          fi

          # Create tags array
          tags="${image_name}:${version}"
          tags="${tags},${image_name}:${version}-${short_sha}"
          tags="${tags},${image_name}:${release_tag}"
          tags="${tags},${image_name}:${release_tag}-${short_sha}"

          echo "image_name=${image_name}" >> $GITHUB_OUTPUT
          echo "tags=${tags}" >> $GITHUB_OUTPUT
          echo "Created tags: ${tags}"

  # ----------------------------------------------------
  # PHASE 1 & 2: Multiplatform Builds (Always Both Platforms)
  # ----------------------------------------------------
  build-platform:
    name: Build ${{ matrix.platform.name }}
    needs: prepare-metadata
    strategy:
      fail-fast: false
      matrix:
        platform:
          - name: linux/amd64
            runner: ubuntu-latest
            tag_suffix: amd64
          - name: linux/arm64
            runner: ubuntu-latest-arm64
            tag_suffix: arm64
    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Configure AWS credentials
        if: fromJSON(needs.prepare-metadata.outputs.docker_push)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SAM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SAM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        if: fromJSON(needs.prepare-metadata.outputs.docker_push)
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Platform-Specific Image
        uses: docker/build-push-action@v6.16.0
        with:
          context: .
          file: Dockerfile
          platforms: ${{ matrix.platform.name }}
          tags: ${{ needs.prepare-metadata.outputs.image_name }}:${{ needs.prepare-metadata.outputs.version }}-${{ needs.prepare-metadata.outputs.short_sha }}-${{ matrix.platform.tag_suffix }}
          push: ${{ fromJSON(needs.prepare-metadata.outputs.docker_push) }}
          cache-from: type=gha,scope=${{ matrix.platform.tag_suffix }}
          cache-to: type=gha,scope=${{ matrix.platform.tag_suffix }},mode=max

  # ----------------------------------------------------
  # PHASE 3: Merge Multi-Platform Manifest (Always)
  # ----------------------------------------------------
  merge-manifest:
    name: Create Multi-Platform Manifest
    needs: [prepare-metadata, build-platform]
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials
        if: fromJSON(needs.prepare-metadata.outputs.docker_push)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.SAM_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.SAM_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        if: fromJSON(needs.prepare-metadata.outputs.docker_push)
        uses: aws-actions/amazon-ecr-login@v2

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3.10.0

      - name: Create and Push Multi-Platform Manifest
        if: fromJSON(needs.prepare-metadata.outputs.docker_push)
        run: |
          # Define the platform-specific tags
          AMD_TAG="${{ needs.prepare-metadata.outputs.image_name }}:${{ needs.prepare-metadata.outputs.version }}-${{ needs.prepare-metadata.outputs.short_sha }}-amd64"
          ARM_TAG="${{ needs.prepare-metadata.outputs.image_name }}:${{ needs.prepare-metadata.outputs.version }}-${{ needs.prepare-metadata.outputs.short_sha }}-arm64"
          
          # Convert comma-separated tags string to array and create manifest for each
          IFS=',' read -ra TAGS <<< "${{ needs.prepare-metadata.outputs.tags }}"
          for TAG in "${TAGS[@]}"; do
            # Trim any whitespace
            TAG=$(echo "$TAG" | xargs)
            echo "Creating manifest for tag: $TAG"
            docker buildx imagetools create \
              --tag "$TAG" \
              "$AMD_TAG" \
              "$ARM_TAG"
          done
          
          echo "Multi-platform manifest created successfully"

      - name: Update Release Manifest
        if: fromJSON(needs.prepare-metadata.outputs.update_manifest)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.SAM_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SAM_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: |
          # Set release manifest variables
          export release_version="${{ needs.prepare-metadata.outputs.version }}-${{ needs.prepare-metadata.outputs.short_sha }}"
          export version="${{ needs.prepare-metadata.outputs.version }}"
          export image_tag="${{ needs.prepare-metadata.outputs.version }}-${{ needs.prepare-metadata.outputs.short_sha }}"
          export chart_version="n/a"
          export sha="${{ needs.prepare-metadata.outputs.commit_hash }}"
          export squad="ai"
          export repository="solace-agent-mesh"
          export release_tag="${{ needs.prepare-metadata.outputs.release_tag }}"

          # Update DynamoDB manifest
          aws dynamodb update-item \
              --table-name solace-cloud-manifest \
              --key "{\"squad\":{\"S\":\"${squad}\"},\"repository\": {\"S\": \"${repository}\"} }"\
              --update-expression "SET dev = :r" \
              --expression-attribute-values \
              """{\":r\":
                      {\"M\":
                          {
                            \"version\":{\"S\":\"${version}\"},
                            \"image_tag\":{\"S\":\"${image_tag}\"},
                            \"chart_version\": {\"S\": \"${chart_version}\"},
                            \"sha\": {\"S\": \"${sha}\"},
                            \"release_version\": {\"S\": \"${release_version}\"}
                          }
                      }
              }"""
