# Solace AI Connector Example: CLI Gateway Configuration
# This file demonstrates how to configure the CLI Gateway using the Generic Gateway Adapter framework.
# It uses the generic App class and points to the CLI adapter implementation.
#
# The CLI Gateway provides an interactive REPL (Read-Eval-Print Loop) interface for
# chatting with agents directly from the command line.
#
# Features:
# - Interactive REPL with rich terminal UI
# - Streaming agent responses with markdown rendering
# - Slash commands: /help, /artifacts, /download <filename>, /exit
# - Artifact downloads to current directory
#
# Required Environment Variables:
# - NAMESPACE: The A2A topic namespace (e.g., "myorg/dev").
# - SOLACE_BROKER_URL: URL of the Solace broker (e.g., "ws://localhost:8008").
# - SOLACE_BROKER_USERNAME: Username for the Solace broker.
# - SOLACE_BROKER_PASSWORD: Password for the Solace broker.
# - SOLACE_BROKER_VPN: VPN name for the Solace broker.
#
# Usage:
#   sam run --config examples/gateways/cli_gateway_example.yaml

log:
  stdout_log_level: INFO
  log_file_level: DEBUG
  log_file: cli_gateway.log

# Shared SAM config
!include ../shared_config.yaml

apps:
  - name: cli_gateway_app # Name for this specific SAC application instance
    app_base_path: . # Assuming running from project root where src/ is located
    app_module: solace_agent_mesh.gateway.generic.app

    broker:
      <<: *broker_connection
      # Queue name and subscriptions are automatically generated by BaseGatewayApp

    # App Level Config - Validated by GenericGatewayApp and BaseGatewayApp
    app_config:
      # --- Required ---
      namespace: ${NAMESPACE}

      # --- Generic Adapter Framework Config ---
      gateway_adapter: solace_agent_mesh.gateway.cli.adapter.CliAdapter

      # --- CLI Adapter-Specific Config ---
      adapter_config:
        default_agent_name: ${DEFAULT_AGENT_NAME, OrchestratorAgent}
        prompt_style: "sam> " # The prompt displayed to users

      # --- Artifact Service (Required for artifact downloads) ---
      # Example using filesystem, ensure path exists and is accessible
      # Scope 'namespace' means artifacts are shared with other components
      # (like ADK Hosts) configured with the same namespace and base_path.
      artifact_service:
        type: "filesystem"
        base_path: "/tmp/samv2"
        artifact_scope: "namespace" # Or "app", or "custom" + artifact_scope_value

      # --- Optional with Defaults (from BaseGatewayApp) ---
      # gateway_id: "my-specific-cli-gw-1" # Auto-generated if omitted
      default_user_identity: "cli_user" # Default user for authentication

      # --- Embed Resolution Config ---
      enable_embed_resolution: true
      gateway_artifact_content_limit_bytes: 10000000 # 10MB example
      gateway_recursive_embed_depth: 3

      # --- System Purpose (from BaseGatewayApp) ---
      system_purpose: >
            The system is an AI Chatbot with agentic capabilities.
            It will use the agents available to provide information,
            reasoning and general assistance for the users in this system.
            **Always return useful artifacts and files that you create to the user.**
            Provide a status update before each tool call.
            Your external name is Agent Mesh.

      response_format: >
            Responses should be clear, concise, and professionally toned.
            Format responses to the user in Markdown using appropriate formatting.
            Note that the user is not able to access the internal artifacts of the system. You
            must return them, so if you create any files or artifacts, provide them to the user
            via the artifact_return embed.
